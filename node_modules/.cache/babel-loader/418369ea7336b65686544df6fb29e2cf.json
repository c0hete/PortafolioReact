{"ast":null,"code":"import _toConsumableArray from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/react-portfolio-website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar _PLATFORM_LOG_STRING, _ERRORS;\n\nimport _regeneratorRuntime from \"C:\\\\react-portfolio-website\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PlatformLoggerServiceImpl = /*#__PURE__*/function () {\n  function PlatformLoggerServiceImpl(container) {\n    _classCallCheck(this, PlatformLoggerServiceImpl);\n\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  _createClass(PlatformLoggerServiceImpl, [{\n    key: \"getPlatformInfoString\",\n    value: function getPlatformInfoString() {\n      var providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n      // version components.\n\n      return providers.map(function (provider) {\n        if (isVersionServiceProvider(provider)) {\n          var service = provider.getImmediate();\n          return \"\".concat(service.library, \"/\").concat(service.version);\n        } else {\n          return null;\n        }\n      }).filter(function (logString) {\n        return logString;\n      }).join(' ');\n    }\n  }]);\n\n  return PlatformLoggerServiceImpl;\n}();\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  var component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* VERSION */\n  ;\n}\n\nvar name$o = \"@firebase/app\";\nvar version$1 = \"0.7.26\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logger = new Logger('@firebase/app');\nvar name$n = \"@firebase/app-compat\";\nvar name$m = \"@firebase/analytics-compat\";\nvar name$l = \"@firebase/analytics\";\nvar name$k = \"@firebase/app-check-compat\";\nvar name$j = \"@firebase/app-check\";\nvar name$i = \"@firebase/auth\";\nvar name$h = \"@firebase/auth-compat\";\nvar name$g = \"@firebase/database\";\nvar name$f = \"@firebase/database-compat\";\nvar name$e = \"@firebase/functions\";\nvar name$d = \"@firebase/functions-compat\";\nvar name$c = \"@firebase/installations\";\nvar name$b = \"@firebase/installations-compat\";\nvar name$a = \"@firebase/messaging\";\nvar name$9 = \"@firebase/messaging-compat\";\nvar name$8 = \"@firebase/performance\";\nvar name$7 = \"@firebase/performance-compat\";\nvar name$6 = \"@firebase/remote-config\";\nvar name$5 = \"@firebase/remote-config-compat\";\nvar name$4 = \"@firebase/storage\";\nvar name$3 = \"@firebase/storage-compat\";\nvar name$2 = \"@firebase/firestore\";\nvar name$1 = \"@firebase/firestore-compat\";\nvar name = \"firebase\";\nvar version = \"9.8.3\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nvar PLATFORM_LOG_STRING = (_PLATFORM_LOG_STRING = {}, _defineProperty(_PLATFORM_LOG_STRING, name$o, 'fire-core'), _defineProperty(_PLATFORM_LOG_STRING, name$n, 'fire-core-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$l, 'fire-analytics'), _defineProperty(_PLATFORM_LOG_STRING, name$m, 'fire-analytics-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$j, 'fire-app-check'), _defineProperty(_PLATFORM_LOG_STRING, name$k, 'fire-app-check-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$i, 'fire-auth'), _defineProperty(_PLATFORM_LOG_STRING, name$h, 'fire-auth-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$g, 'fire-rtdb'), _defineProperty(_PLATFORM_LOG_STRING, name$f, 'fire-rtdb-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$e, 'fire-fn'), _defineProperty(_PLATFORM_LOG_STRING, name$d, 'fire-fn-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$c, 'fire-iid'), _defineProperty(_PLATFORM_LOG_STRING, name$b, 'fire-iid-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$a, 'fire-fcm'), _defineProperty(_PLATFORM_LOG_STRING, name$9, 'fire-fcm-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$8, 'fire-perf'), _defineProperty(_PLATFORM_LOG_STRING, name$7, 'fire-perf-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$6, 'fire-rc'), _defineProperty(_PLATFORM_LOG_STRING, name$5, 'fire-rc-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$4, 'fire-gcs'), _defineProperty(_PLATFORM_LOG_STRING, name$3, 'fire-gcs-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$2, 'fire-fst'), _defineProperty(_PLATFORM_LOG_STRING, name$1, 'fire-fst-compat'), _defineProperty(_PLATFORM_LOG_STRING, 'fire-js', 'fire-js'), _defineProperty(_PLATFORM_LOG_STRING, name, 'fire-js-all'), _PLATFORM_LOG_STRING);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nvar _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(\"Component \".concat(component.name, \" failed to register with FirebaseApp \").concat(app.name), e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  var componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(\"There were multiple attempts to register component \".concat(componentName, \".\"));\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  var _iterator = _createForOfIteratorHelper(_apps.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var app = _step.value;\n\n      _addComponent(app, component);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name) {\n  var instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ENTRY_NAME;\n\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"no-app\"\n/* NO_APP */\n, \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()'), _defineProperty(_ERRORS, \"bad-app-name\"\n/* BAD_APP_NAME */\n, \"Illegal App name: '{$appName}\"), _defineProperty(_ERRORS, \"duplicate-app\"\n/* DUPLICATE_APP */\n, \"Firebase App named '{$appName}' already exists with different options or config\"), _defineProperty(_ERRORS, \"app-deleted\"\n/* APP_DELETED */\n, \"Firebase App named '{$appName}' already deleted\"), _defineProperty(_ERRORS, \"invalid-app-argument\"\n/* INVALID_APP_ARGUMENT */\n, 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'), _defineProperty(_ERRORS, \"invalid-log-argument\"\n/* INVALID_LOG_ARGUMENT */\n, 'First argument to `onLog` must be null or a function.'), _defineProperty(_ERRORS, \"storage-open\"\n/* STORAGE_OPEN */\n, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-get\"\n/* STORAGE_GET */\n, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-set\"\n/* STORAGE_WRITE */\n, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-delete\"\n/* STORAGE_DELETE */\n, 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar FirebaseAppImpl = /*#__PURE__*/function () {\n  function FirebaseAppImpl(options, config, container) {\n    var _this = this;\n\n    _classCallCheck(this, FirebaseAppImpl);\n\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', function () {\n      return _this;\n    }, \"PUBLIC\"\n    /* PUBLIC */\n    ));\n  }\n\n  _createClass(FirebaseAppImpl, [{\n    key: \"automaticDataCollectionEnabled\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._automaticDataCollectionEnabled;\n    },\n    set: function set(val) {\n      this.checkDestroyed();\n      this._automaticDataCollectionEnabled = val;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._name;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._options;\n    }\n  }, {\n    key: \"config\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._config;\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      return this._container;\n    }\n  }, {\n    key: \"isDeleted\",\n    get: function get() {\n      return this._isDeleted;\n    },\n    set: function set(val) {\n      this._isDeleted = val;\n    }\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\n\n  }, {\n    key: \"checkDestroyed\",\n    value: function checkDestroyed() {\n      if (this.isDeleted) {\n        throw ERROR_FACTORY.create(\"app-deleted\"\n        /* APP_DELETED */\n        , {\n          appName: this._name\n        });\n      }\n    }\n  }]);\n\n  return FirebaseAppImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nvar SDK_VERSION = version;\n\nfunction initializeApp(options) {\n  var rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof rawConfig !== 'object') {\n    var _name = rawConfig;\n    rawConfig = {\n      name: _name\n    };\n  }\n\n  var config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  var name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  var existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  var container = new ComponentContainer(name);\n\n  var _iterator2 = _createForOfIteratorHelper(_components.values()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var component = _step2.value;\n      container.addComponent(component);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n  var app = _apps.get(name);\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction deleteApp(_x) {\n  return _deleteApp.apply(this, arguments);\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteApp() {\n  _deleteApp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(app) {\n    var name;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            name = app.name;\n\n            if (!_apps.has(name)) {\n              _context7.next = 6;\n              break;\n            }\n\n            _apps.delete(name);\n\n            _context7.next = 5;\n            return Promise.all(app.container.getProviders().map(function (provider) {\n              return provider.delete();\n            }));\n\n          case 5:\n            app.isDeleted = true;\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _deleteApp.apply(this, arguments);\n}\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += \"-\".concat(variant);\n  }\n\n  var libraryMismatch = library.match(/\\s|\\//);\n  var versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    var warning = [\"Unable to register library \\\"\".concat(library, \"\\\" with version \\\"\").concat(version, \"\\\":\")];\n\n    if (libraryMismatch) {\n      warning.push(\"library name \\\"\".concat(library, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(\"version name \\\"\".concat(version, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(\"\".concat(library, \"-version\"), function () {\n    return {\n      library: library,\n      version: version\n    };\n  }, \"VERSION\"\n  /* VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DB_NAME = 'firebase-heartbeat-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-heartbeat-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: function upgrade(db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(function (e) {\n      throw ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nfunction readHeartbeatsFromIndexedDB(_x2) {\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction _readHeartbeatsFromIndexedDB() {\n  _readHeartbeatsFromIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(app) {\n    var _a, db;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context8.sent;\n            return _context8.abrupt(\"return\", db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app)));\n\n          case 7:\n            _context8.prev = 7;\n            _context8.t0 = _context8[\"catch\"](0);\n            throw ERROR_FACTORY.create(\"storage-get\"\n            /* STORAGE_GET */\n            , {\n              originalErrorMessage: (_a = _context8.t0) === null || _a === void 0 ? void 0 : _a.message\n            });\n\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 7]]);\n  }));\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction writeHeartbeatsToIndexedDB(_x3, _x4) {\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction _writeHeartbeatsToIndexedDB() {\n  _writeHeartbeatsToIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(app, heartbeatObject) {\n    var _a, db, tx, objectStore;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context9.sent;\n            tx = db.transaction(STORE_NAME, 'readwrite');\n            objectStore = tx.objectStore(STORE_NAME);\n            _context9.next = 8;\n            return objectStore.put(heartbeatObject, computeKey(app));\n\n          case 8:\n            return _context9.abrupt(\"return\", tx.done);\n\n          case 11:\n            _context9.prev = 11;\n            _context9.t0 = _context9[\"catch\"](0);\n            throw ERROR_FACTORY.create(\"storage-set\"\n            /* STORAGE_WRITE */\n            , {\n              originalErrorMessage: (_a = _context9.t0) === null || _a === void 0 ? void 0 : _a.message\n            });\n\n          case 14:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 11]]);\n  }));\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return \"\".concat(app.name, \"!\").concat(app.options.appId);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_HEADER_BYTES = 1024; // 30 days\n\nvar STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nvar HeartbeatServiceImpl = /*#__PURE__*/function () {\n  function HeartbeatServiceImpl(container) {\n    var _this2 = this;\n\n    _classCallCheck(this, HeartbeatServiceImpl);\n\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    var app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(function (result) {\n      _this2._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  _createClass(HeartbeatServiceImpl, [{\n    key: \"triggerHeartbeat\",\n    value: function () {\n      var _triggerHeartbeat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var platformLogger, agent, date;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n                // service, not the browser user agent.\n\n                agent = platformLogger.getPlatformInfoString();\n                date = getUTCDateString();\n\n                if (!(this._heartbeatsCache === null)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return this._heartbeatsCachePromise;\n\n              case 6:\n                this._heartbeatsCache = _context.sent;\n\n              case 7:\n                if (!(this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {\n                  return singleDateHeartbeat.date === date;\n                }))) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 11:\n                // There is no entry for this date. Create one.\n                this._heartbeatsCache.heartbeats.push({\n                  date: date,\n                  agent: agent\n                });\n\n              case 12:\n                // Remove entries older than 30 days.\n                this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function (singleDateHeartbeat) {\n                  var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n                  var now = Date.now();\n                  return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n                });\n                return _context.abrupt(\"return\", this._storage.overwrite(this._heartbeatsCache));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function triggerHeartbeat() {\n        return _triggerHeartbeat.apply(this, arguments);\n      }\n\n      return triggerHeartbeat;\n    }()\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\n\n  }, {\n    key: \"getHeartbeatsHeader\",\n    value: function () {\n      var _getHeartbeatsHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var date, _extractHeartbeatsFor, heartbeatsToSend, unsentEntries, headerString;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this._heartbeatsCache === null)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this._heartbeatsCachePromise;\n\n              case 3:\n                if (!(this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", '');\n\n              case 5:\n                date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n                _extractHeartbeatsFor = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _extractHeartbeatsFor.heartbeatsToSend, unsentEntries = _extractHeartbeatsFor.unsentEntries;\n                headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n                  version: 2,\n                  heartbeats: heartbeatsToSend\n                })); // Store last sent date to prevent another being logged/sent for the same day.\n\n                this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n                if (!(unsentEntries.length > 0)) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                // Store any unsent entries if they exist.\n                this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n                // since the cache isn't empty and this will be called again on the next request,\n                // and is probably safest if we await it.\n\n                _context2.next = 13;\n                return this._storage.overwrite(this._heartbeatsCache);\n\n              case 13:\n                _context2.next = 17;\n                break;\n\n              case 15:\n                this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n                void this._storage.overwrite(this._heartbeatsCache);\n\n              case 17:\n                return _context2.abrupt(\"return\", headerString);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getHeartbeatsHeader() {\n        return _getHeartbeatsHeader.apply(this, arguments);\n      }\n\n      return getHeartbeatsHeader;\n    }()\n  }]);\n\n  return HeartbeatServiceImpl;\n}();\n\nfunction getUTCDateString() {\n  var today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache) {\n  var maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  var heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  var unsentEntries = heartbeatsCache.slice();\n\n  var _iterator3 = _createForOfIteratorHelper(heartbeatsCache),\n      _step3;\n\n  try {\n    var _loop = function _loop() {\n      var singleDateHeartbeat = _step3.value;\n      // Look for an existing entry with the same user agent.\n      var heartbeatEntry = heartbeatsToSend.find(function (hb) {\n        return hb.agent === singleDateHeartbeat.agent;\n      });\n\n      if (!heartbeatEntry) {\n        // If no entry for this user agent exists, create one.\n        heartbeatsToSend.push({\n          agent: singleDateHeartbeat.agent,\n          dates: [singleDateHeartbeat.date]\n        });\n\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          // If the header would exceed max size, remove the added heartbeat\n          // entry and stop adding to the header.\n          heartbeatsToSend.pop();\n          return \"break\";\n        }\n      } else {\n        heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n        // and stop adding to the header.\n\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          heartbeatEntry.dates.pop();\n          return \"break\";\n        }\n      } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n      // quota and the loop breaks early.)\n\n\n      unsentEntries = unsentEntries.slice(1);\n    };\n\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"break\") break;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    heartbeatsToSend: heartbeatsToSend,\n    unsentEntries: unsentEntries\n  };\n}\n\nvar HeartbeatStorageImpl = /*#__PURE__*/function () {\n  function HeartbeatStorageImpl(app) {\n    _classCallCheck(this, HeartbeatStorageImpl);\n\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  _createClass(HeartbeatStorageImpl, [{\n    key: \"runIndexedDBEnvironmentCheck\",\n    value: function () {\n      var _runIndexedDBEnvironmentCheck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (isIndexedDBAvailable()) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", false);\n\n              case 4:\n                return _context3.abrupt(\"return\", validateIndexedDBOpenable().then(function () {\n                  return true;\n                }).catch(function () {\n                  return false;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function runIndexedDBEnvironmentCheck() {\n        return _runIndexedDBEnvironmentCheck.apply(this, arguments);\n      }\n\n      return runIndexedDBEnvironmentCheck;\n    }()\n    /**\r\n     * Read all heartbeats.\r\n     */\n\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var canUseIndexedDB, idbHeartbeatObject;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context4.sent;\n\n                if (canUseIndexedDB) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  heartbeats: []\n                });\n\n              case 7:\n                _context4.next = 9;\n                return readHeartbeatsFromIndexedDB(this.app);\n\n              case 9:\n                idbHeartbeatObject = _context4.sent;\n                return _context4.abrupt(\"return\", idbHeartbeatObject || {\n                  heartbeats: []\n                });\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }() // overwrite the storage with the provided heartbeats\n\n  }, {\n    key: \"overwrite\",\n    value: function () {\n      var _overwrite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context5.sent;\n\n                if (canUseIndexedDB) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 7:\n                _context5.next = 9;\n                return this.read();\n\n              case 9:\n                existingHeartbeatsObject = _context5.sent;\n                return _context5.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: heartbeatsObject.heartbeats\n                }));\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function overwrite(_x5) {\n        return _overwrite.apply(this, arguments);\n      }\n\n      return overwrite;\n    }() // add heartbeats\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context6.sent;\n\n                if (canUseIndexedDB) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 7:\n                _context6.next = 9;\n                return this.read();\n\n              case 9:\n                existingHeartbeatsObject = _context6.sent;\n                return _context6.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: [].concat(_toConsumableArray(existingHeartbeatsObject.heartbeats), _toConsumableArray(heartbeatsObject.heartbeats))\n                }));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function add(_x6) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }]);\n\n  return HeartbeatStorageImpl;\n}();\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', function (container) {\n    return new PlatformLoggerServiceImpl(container);\n  }, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', function (container) {\n    return new HeartbeatServiceImpl(container);\n  }, \"PRIVATE\"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"mappings":"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","names":["PlatformLoggerServiceImpl","container","providers","getProviders","map","isVersionServiceProvider","provider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","Map","app","addComponent","e","debug","name","addOrOverwriteComponent","_registerComponent","componentName","_components","has","set","_apps","values","_addComponent","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","_getProvider","clearInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","ErrorFactory","FirebaseAppImpl","options","config","_isDeleted","_options","Object","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","checkDestroyed","val","isDeleted","create","SDK_VERSION","initializeApp","rawConfig","String","existingApp","get","deepEqual","ComponentContainer","newApp","getApps","Array","from","deleteApp","delete","Promise","all","registerVersion","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","push","warn","logCallback","setUserLogHandler","setLogLevel","logLevel","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","transaction","objectStore","computeKey","writeHeartbeatsToIndexedDB","heartbeatObject","tx","put","done","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","result","platformLogger","agent","getPlatformInfoString","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","length","extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","base64urlEncodeWithoutPadding","JSON","stringify","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents"],"sources":["C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\platformLoggerService.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\logger.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\constants.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\internal.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\errors.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\firebaseApp.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\api.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\indexeddb.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\heartbeatService.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\registerCoreComponents.ts","C:\\react-portfolio-website\\node_modules\\@firebase\\app\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  STORAGE_DELETE = 'storage-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppError.STORAGE_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.STORAGE_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_GET, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_WRITE, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}